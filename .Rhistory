grid.arrange(
ggplot(results_melt) +
geom_density(aes(x=x, color=method, group=method, fill=method), alpha=0.3, lwd=1) +
geom_vline(aes(xintercept=mean(true_x), color="true")) +
geom_vline(aes(xintercept=mean(advi_x), color="advi"))
,
ggplot(results_melt) +
geom_density(aes(x=x, color=method, group=method, fill=method), alpha=0.3, lwd=1) +
geom_vline(aes(xintercept=mean(true_x), color="true")) +
geom_vline(aes(xintercept=mean(advi_x), color="advi")) +
xlim(quantile(advi_x, 0.001), quantile(advi_x, 0.999))
, ncol=2
)
mean(advi_x)
mean(true_x)
sd(true_x)
print('Z score of mean difference: ')
(mean(advi_x) - mean(true_x)) / sd(true_x)
advi_approx <- vb(
model,
list(alpha_left=alpha_left, alpha_right=alpha_right,
beta_left=beta_left, beta_right=beta_right,
x_min=x_min, w=weight),
output_samples=n)
advi_x <- extract(advi_approx)$x
length(advi_x)
results <- data.frame(advi=advi_x, true=true_x)
results_melt <- melt(results) %>% rename(x=value, method=variable)
grid.arrange(
ggplot(results_melt) +
geom_density(aes(x=x, color=method, group=method, fill=method), alpha=0.3, lwd=1) +
geom_vline(aes(xintercept=mean(true_x), color="true")) +
geom_vline(aes(xintercept=mean(advi_x), color="advi"))
,
ggplot(results_melt) +
geom_density(aes(x=x, color=method, group=method, fill=method), alpha=0.3, lwd=1) +
geom_vline(aes(xintercept=mean(true_x), color="true")) +
geom_vline(aes(xintercept=mean(advi_x), color="advi")) +
xlim(quantile(advi_x, 0.001), quantile(advi_x, 0.999))
, ncol=2
)
mean(advi_x)
mean(true_x)
sd(true_x)
print('Z score of mean difference: ')
(mean(advi_x) - mean(true_x)) / sd(true_x)
beta_left <- 1
beta_right <- 0
alpha_left <- 0
alpha_right <- 3
x_min <- 0.1 # minimum for the polynomial part.
# number of draws.
n <- 50000
left_iters <- rbinom(1, n, prob=weight)
right_iters <- n - left_iters
left_samples <- sampling(
model_separate,
list(alpha=alpha_left, beta=beta_left, x_min=x_min),
iter=2 * left_iters, chains=1)
right_samples <- sampling(
model_separate,
list(alpha=alpha_right, beta=beta_right, x_min=x_min),
iter=2 * right_iters, chains=1)
true_x <- c(-1 * extract(left_samples)$x, extract(right_samples)$x)
length(true_x)
advi_approx <- vb(
model,
list(alpha_left=alpha_left, alpha_right=alpha_right,
beta_left=beta_left, beta_right=beta_right,
x_min=x_min, w=weight),
output_samples=n)
advi_x <- extract(advi_approx)$x
length(advi_x)
results <- data.frame(advi=advi_x, true=true_x)
results_melt <- melt(results) %>% rename(x=value, method=variable)
grid.arrange(
ggplot(results_melt) +
geom_density(aes(x=x, color=method, group=method, fill=method), alpha=0.3, lwd=1) +
geom_vline(aes(xintercept=mean(true_x), color="true")) +
geom_vline(aes(xintercept=mean(advi_x), color="advi"))
,
ggplot(results_melt) +
geom_density(aes(x=x, color=method, group=method, fill=method), alpha=0.3, lwd=1) +
geom_vline(aes(xintercept=mean(true_x), color="true")) +
geom_vline(aes(xintercept=mean(advi_x), color="advi")) +
xlim(quantile(advi_x, 0.001), quantile(advi_x, 0.999))
, ncol=2
)
mean(advi_x)
mean(true_x)
sd(true_x)
print('Z score of mean difference: ')
(mean(advi_x) - mean(true_x)) / sd(true_x)
advi_approx <- vb(
model,
list(alpha_left=alpha_left, alpha_right=alpha_right,
beta_left=beta_left, beta_right=beta_right,
x_min=x_min, w=weight),
output_samples=n)
advi_x <- extract(advi_approx)$x
length(advi_x)
results <- data.frame(advi=advi_x, true=true_x)
results_melt <- melt(results) %>% rename(x=value, method=variable)
grid.arrange(
ggplot(results_melt) +
geom_density(aes(x=x, color=method, group=method, fill=method), alpha=0.3, lwd=1) +
geom_vline(aes(xintercept=mean(true_x), color="true")) +
geom_vline(aes(xintercept=mean(advi_x), color="advi"))
,
ggplot(results_melt) +
geom_density(aes(x=x, color=method, group=method, fill=method), alpha=0.3, lwd=1) +
geom_vline(aes(xintercept=mean(true_x), color="true")) +
geom_vline(aes(xintercept=mean(advi_x), color="advi")) +
xlim(quantile(advi_x, 0.001), quantile(advi_x, 0.999))
, ncol=2
)
mean(advi_x)
mean(true_x)
sd(true_x)
print('Z score of mean difference: ')
(mean(advi_x) - mean(true_x)) / sd(true_x)
weight <- 0.5 # prob of the left distribution
beta_left <- 1
beta_right <- 0
alpha_left <- 0
alpha_right <- 3
x_min <- 10 # minimum for the polynomial part.
# number of draws.
n <- 50000
left_iters <- rbinom(1, n, prob=weight)
right_iters <- n - left_iters
left_samples <- sampling(
model_separate,
list(alpha=alpha_left, beta=beta_left, x_min=x_min),
iter=2 * left_iters, chains=1)
right_samples <- sampling(
model_separate,
list(alpha=alpha_right, beta=beta_right, x_min=x_min),
iter=2 * right_iters, chains=1)
true_x <- c(-1 * extract(left_samples)$x, extract(right_samples)$x)
length(true_x)
advi_approx <- vb(
model,
list(alpha_left=alpha_left, alpha_right=alpha_right,
beta_left=beta_left, beta_right=beta_right,
x_min=x_min, w=weight),
output_samples=n)
advi_x <- extract(advi_approx)$x
length(advi_x)
results <- data.frame(advi=advi_x, true=true_x)
results_melt <- melt(results) %>% rename(x=value, method=variable)
grid.arrange(
ggplot(results_melt) +
geom_density(aes(x=x, color=method, group=method, fill=method), alpha=0.3, lwd=1) +
geom_vline(aes(xintercept=mean(true_x), color="true")) +
geom_vline(aes(xintercept=mean(advi_x), color="advi"))
,
ggplot(results_melt) +
geom_density(aes(x=x, color=method, group=method, fill=method), alpha=0.3, lwd=1) +
geom_vline(aes(xintercept=mean(true_x), color="true")) +
geom_vline(aes(xintercept=mean(advi_x), color="advi")) +
xlim(quantile(advi_x, 0.001), quantile(advi_x, 0.999))
, ncol=2
)
mean(advi_x)
mean(true_x)
sd(true_x)
print('Z score of mean difference: ')
(mean(advi_x) - mean(true_x)) / sd(true_x)
weight <- 0.5 # prob of the left distribution
beta_left <- 1
beta_right <- 0
alpha_left <- 0
alpha_right <- 3
x_min <- 1 # minimum for the polynomial part.
# number of draws.
n <- 50000
left_iters <- rbinom(1, n, prob=weight)
right_iters <- n - left_iters
left_samples <- sampling(
model_separate,
list(alpha=alpha_left, beta=beta_left, x_min=x_min),
iter=2 * left_iters, chains=1)
right_samples <- sampling(
model_separate,
list(alpha=alpha_right, beta=beta_right, x_min=x_min),
iter=2 * right_iters, chains=1)
true_x <- c(-1 * extract(left_samples)$x, extract(right_samples)$x)
length(true_x)
advi_approx <- vb(
model,
list(alpha_left=alpha_left, alpha_right=alpha_right,
beta_left=beta_left, beta_right=beta_right,
x_min=x_min, w=weight),
output_samples=n)
advi_x <- extract(advi_approx)$x
length(advi_x)
results <- data.frame(advi=advi_x, true=true_x)
results_melt <- melt(results) %>% rename(x=value, method=variable)
grid.arrange(
ggplot(results_melt) +
geom_density(aes(x=x, color=method, group=method, fill=method), alpha=0.3, lwd=1) +
geom_vline(aes(xintercept=mean(true_x), color="true")) +
geom_vline(aes(xintercept=mean(advi_x), color="advi"))
,
ggplot(results_melt) +
geom_density(aes(x=x, color=method, group=method, fill=method), alpha=0.3, lwd=1) +
geom_vline(aes(xintercept=mean(true_x), color="true")) +
geom_vline(aes(xintercept=mean(advi_x), color="advi")) +
xlim(quantile(advi_x, 0.001), quantile(advi_x, 0.999))
, ncol=2
)
mean(advi_x)
mean(true_x)
sd(true_x)
print('Z score of mean difference: ')
(mean(advi_x) - mean(true_x)) / sd(true_x)
library(rstan)
library(rstansensitivity)
# data parameters
NobsNM <- 20
NobsNW <- 20
NobsDM <- 20
NobsDW <- 20
NcenNM <- 20
NcenNW <- 20
NcenDM <- 20
NcenDW <- 20
M_bg <- 2
M_biom <- 10
generate_pooled_data <- T
set.seed(123456)
# generate data
bbg <- list()   # established risk factor coeffs
bbiom <- list() # candidate risk factor coeffs
if (generate_pooled_data){
bbg[[1]] <- rnorm(M_bg)
bbiom[[1]] <- rnorm(M_biom)/rgamma(M_biom, 5)
# set half to null to simulate sparsity
bbiom[[1]][(ceiling(M_biom/2)+1):M_biom] <- 0
bbg[[2]] <- bbg[[1]]; bbg[[3]] <- bbg[[1]]; bbg[[4]] <- bbg[[1]]
bbiom[[2]] <- bbiom[[1]]; bbiom[[3]] <- bbiom[[1]]; bbiom[[4]] <- bbiom[[1]]
alfa <- (1 + runif(1)) * c(1,1,1,1);
} else {
for (i in 1:4){
bbg[[i]] <- rnorm(M_bg)
bbiom[[i]] <- rnorm(M_biom)
# set half to null to simulate sparsity
bbiom[[i]][(ceiling(M_biom/2)+1):M_biom] <- 0
}
alfa <- 1.0 + runif(4);
}
randn <- function(n, m) matrix(rnorm(n*m), nrow=n, ncol=m)
rand_times <- function(n) 1.2 * runif(n)
data <- list(M_bg = M_bg, M_biom = M_biom, nu = 3)
i <- 0
for (g in c("NM", "NW", "DM", "DW")){
i <- i + 1
for (o in c("obs", "cen")){
names <- c(sprintf("N%s%s", o, g),
sprintf("X%s_bg%s", o, g),
sprintf("X%s_biom%s", o, g),
sprintf("y%s%s", o, g))
data[[names[1]]] <- get(names[1]);
data[[names[2]]] <- randn(get(names[1]), M_bg)
data[[names[3]]] <- randn(get(names[1]), M_biom)
#    data[[names[4]]] <- rand_times(get(names[1]))
if (o == "obs") {
data[[names[4]]] <- rweibull(
get(names[1]), alfa[i],
exp(-(data[[names[2]]] %*% bbg[[i]] + data[[names[3]]] %*% bbiom[[i]])/alfa[i]))
}
if (o == "cen") {
data[[names[4]]] <- runif(
get(names[1])) * rweibull(get(names[1]),
alfa[i], exp(-(data[[names[2]]] %*%
bbg[[i]] + data[[names[3]]] %*% bbiom[[i]])/alfa[i]))
}
}
}
data1 <- list(M_bg = M_bg, M_biom = M_biom, nu = 3)
data1$Nobs <- data$NobsNM; data1$Ncen <- data$NcenNM;
data1$yobs <- data$yobsNM; data1$ycen <- data$ycenNM;
data1$Xobs_bg <- data$Xobs_bgNM; data1$Xcen_bg <- data$Xcen_bgNM;
data1$Xobs_biom <- data$Xobs_biomNM; data1$Xcen_biom <- data$Xcen_biomNM;
# initial parameters
nchains <- 2
niter <- 1000
nwarmup <- 500
init <- list()
for (i in 1:nchains){
init[[i]] <- list(
csprime_biom = runif(2),
csprime_bg = runif(2),
csprime_al = runif(2),
cs_params = abs(rnorm(4)),
tau_s_bg_raw = 0.1*abs(rnorm(1)),
tau_bg_raw = abs(rnorm(M_bg)),
tau_s1_biom_raw = 0.1*abs(rnorm(1)),
tau_s2_biom_raw = 0.1*abs(rnorm(1)),
tau_biom_raw = abs(rnorm(M_biom)),
tau1_biom_raw = abs(rnorm(M_biom)),
tau2_biom_raw = abs(rnorm(M_biom)),
alpha_raw = 0.01*randn(1, 4),
beta_bg_raw = randn(M_bg, 4),
beta_biom_raw = randn(M_biom, 4),
mu = rnorm(4)
)
}
init1 <- list()
for (i in 1:nchains){
init1[[i]] <- list(
tau_s_bg_raw = 0.1*abs(rnorm(1)),
tau_bg_raw = abs(rnorm(M_bg)),
tau_s1_biom_raw = 0.1*abs(rnorm(1)),
tau_s2_biom_raw = 0.1*abs(rnorm(1)),
tau_biom_raw = abs(rnorm(M_biom)),
tau1_biom_raw = abs(rnorm(M_biom)),
tau2_biom_raw = abs(rnorm(M_biom)),
alpha_raw = 0.01*rnorm(1),
beta_bg_raw = rnorm(M_bg),
beta_biom_raw = rnorm(M_biom),
mu = rnorm(1)
)
}
# run joint models
# fit_bg <- stan(file = "wei_bg_joint.stan", data = data, init = init, chains = nchains, iter = niter, warmup = nwarmup)
# fit_hs <- stan(file = "wei_hs_joint.stan", data = data, init = init, chains = nchains, iter = niter, warmup = nwarmup)
# fit_lap <- stan(file = "wei_lap_joint.stan", data = data, init = init, chains = nchains, iter = niter, warmup = nwarmup)
# fit_gau <- stan(file = "wei_gau_joint.stan", data = data, init = init, chains = nchains, iter = niter, warmup = nwarmup)
# run separate model for NM data
# fit_bg1 <- stan(file = "wei_bg.stan", data = data1, init = init1, chains = nchains, iter = niter, warmup = nwarmup)
fit_hs1 <- stan(file="wei_hs.stan",
data = data1, init = init1,
chains = nchains,
iter = niter,
warmup = nwarmup)
# Model sensitivity
SetHyperparameters <- function(data) {
data$tau_mu <- 10
data$tau_al <- 10
data$r1_global_prior_loc <- 0.0
data$r1_global_prior_scale <- 1.0
data$r2_global_prior_shape <- 0.5
data$r2_global_prior_scale <- 0.5
data$r1_local_prior_loc  <- 0.0
data$r1_local_prior_scale <- 1.0
data$r2_local_prior_shape <- 0.5
data$r2_local_prior_scale <- 0.5
data$r_global_prior_loc <- 0.0
data$r_global_prior_scale <- 10.0
data$r_local_prior_df <- 1.0
data$beta_biom_raw_prior_loc <- 0.0
data$beta_biom_raw_prior_scale <- 1.0
data$beta_bg_raw_prior_loc <- 0.0
data$beta_bg_raw_prior_scale <- 1.0
data$alpha_raw_prior_loc <- 0.0
data$alpha_raw_prior_scale <- 1.0
data$mu_prior_loc <- 0.0
return(data)
}
data1 <- SetHyperparameters(data1)
hs_sens_model_name <- GenerateSensitivityFromModel("wei_hs_hyperparameters.stan")
stan_sensitivity_model <- GetStanSensitivityModel(hs_sens_model_name, data1)
setwd("/home/rgiordan/Documents/git_repos/stan-survival-shrinkage")
library(rstan)
library(rstansensitivity)
# data parameters
NobsNM <- 20
NobsNW <- 20
NobsDM <- 20
NobsDW <- 20
NcenNM <- 20
NcenNW <- 20
NcenDM <- 20
NcenDW <- 20
M_bg <- 2
M_biom <- 10
generate_pooled_data <- T
set.seed(123456)
# generate data
bbg <- list()   # established risk factor coeffs
bbiom <- list() # candidate risk factor coeffs
if (generate_pooled_data){
bbg[[1]] <- rnorm(M_bg)
bbiom[[1]] <- rnorm(M_biom)/rgamma(M_biom, 5)
# set half to null to simulate sparsity
bbiom[[1]][(ceiling(M_biom/2)+1):M_biom] <- 0
bbg[[2]] <- bbg[[1]]; bbg[[3]] <- bbg[[1]]; bbg[[4]] <- bbg[[1]]
bbiom[[2]] <- bbiom[[1]]; bbiom[[3]] <- bbiom[[1]]; bbiom[[4]] <- bbiom[[1]]
alfa <- (1 + runif(1)) * c(1,1,1,1);
} else {
for (i in 1:4){
bbg[[i]] <- rnorm(M_bg)
bbiom[[i]] <- rnorm(M_biom)
# set half to null to simulate sparsity
bbiom[[i]][(ceiling(M_biom/2)+1):M_biom] <- 0
}
alfa <- 1.0 + runif(4);
}
randn <- function(n, m) matrix(rnorm(n*m), nrow=n, ncol=m)
rand_times <- function(n) 1.2 * runif(n)
data <- list(M_bg = M_bg, M_biom = M_biom, nu = 3)
i <- 0
for (g in c("NM", "NW", "DM", "DW")){
i <- i + 1
for (o in c("obs", "cen")){
names <- c(sprintf("N%s%s", o, g),
sprintf("X%s_bg%s", o, g),
sprintf("X%s_biom%s", o, g),
sprintf("y%s%s", o, g))
data[[names[1]]] <- get(names[1]);
data[[names[2]]] <- randn(get(names[1]), M_bg)
data[[names[3]]] <- randn(get(names[1]), M_biom)
#    data[[names[4]]] <- rand_times(get(names[1]))
if (o == "obs") {
data[[names[4]]] <- rweibull(
get(names[1]), alfa[i],
exp(-(data[[names[2]]] %*% bbg[[i]] + data[[names[3]]] %*% bbiom[[i]])/alfa[i]))
}
if (o == "cen") {
data[[names[4]]] <- runif(
get(names[1])) * rweibull(get(names[1]),
alfa[i], exp(-(data[[names[2]]] %*%
bbg[[i]] + data[[names[3]]] %*% bbiom[[i]])/alfa[i]))
}
}
}
data1 <- list(M_bg = M_bg, M_biom = M_biom, nu = 3)
data1$Nobs <- data$NobsNM; data1$Ncen <- data$NcenNM;
data1$yobs <- data$yobsNM; data1$ycen <- data$ycenNM;
data1$Xobs_bg <- data$Xobs_bgNM; data1$Xcen_bg <- data$Xcen_bgNM;
data1$Xobs_biom <- data$Xobs_biomNM; data1$Xcen_biom <- data$Xcen_biomNM;
# initial parameters
nchains <- 2
niter <- 1000
nwarmup <- 500
init <- list()
for (i in 1:nchains){
init[[i]] <- list(
csprime_biom = runif(2),
csprime_bg = runif(2),
csprime_al = runif(2),
cs_params = abs(rnorm(4)),
tau_s_bg_raw = 0.1*abs(rnorm(1)),
tau_bg_raw = abs(rnorm(M_bg)),
tau_s1_biom_raw = 0.1*abs(rnorm(1)),
tau_s2_biom_raw = 0.1*abs(rnorm(1)),
tau_biom_raw = abs(rnorm(M_biom)),
tau1_biom_raw = abs(rnorm(M_biom)),
tau2_biom_raw = abs(rnorm(M_biom)),
alpha_raw = 0.01*randn(1, 4),
beta_bg_raw = randn(M_bg, 4),
beta_biom_raw = randn(M_biom, 4),
mu = rnorm(4)
)
}
init1 <- list()
for (i in 1:nchains){
init1[[i]] <- list(
tau_s_bg_raw = 0.1*abs(rnorm(1)),
tau_bg_raw = abs(rnorm(M_bg)),
tau_s1_biom_raw = 0.1*abs(rnorm(1)),
tau_s2_biom_raw = 0.1*abs(rnorm(1)),
tau_biom_raw = abs(rnorm(M_biom)),
tau1_biom_raw = abs(rnorm(M_biom)),
tau2_biom_raw = abs(rnorm(M_biom)),
alpha_raw = 0.01*rnorm(1),
beta_bg_raw = rnorm(M_bg),
beta_biom_raw = rnorm(M_biom),
mu = rnorm(1)
)
}
# run joint models
# fit_bg <- stan(file = "wei_bg_joint.stan", data = data, init = init, chains = nchains, iter = niter, warmup = nwarmup)
# fit_hs <- stan(file = "wei_hs_joint.stan", data = data, init = init, chains = nchains, iter = niter, warmup = nwarmup)
# fit_lap <- stan(file = "wei_lap_joint.stan", data = data, init = init, chains = nchains, iter = niter, warmup = nwarmup)
# fit_gau <- stan(file = "wei_gau_joint.stan", data = data, init = init, chains = nchains, iter = niter, warmup = nwarmup)
# run separate model for NM data
# fit_bg1 <- stan(file = "wei_bg.stan", data = data1, init = init1, chains = nchains, iter = niter, warmup = nwarmup)
fit_hs1 <- stan(file="wei_hs.stan",
data = data1, init = init1,
chains = nchains,
iter = niter,
warmup = nwarmup)
# Model sensitivity
SetHyperparameters <- function(data) {
data$tau_mu <- 10
data$tau_al <- 10
data$r1_global_prior_loc <- 0.0
data$r1_global_prior_scale <- 1.0
data$r2_global_prior_shape <- 0.5
data$r2_global_prior_scale <- 0.5
data$r1_local_prior_loc  <- 0.0
data$r1_local_prior_scale <- 1.0
data$r2_local_prior_shape <- 0.5
data$r2_local_prior_scale <- 0.5
data$r_global_prior_loc <- 0.0
data$r_global_prior_scale <- 10.0
data$r_local_prior_df <- 1.0
data$beta_biom_raw_prior_loc <- 0.0
data$beta_biom_raw_prior_scale <- 1.0
data$beta_bg_raw_prior_loc <- 0.0
data$beta_bg_raw_prior_scale <- 1.0
data$alpha_raw_prior_loc <- 0.0
data$alpha_raw_prior_scale <- 1.0
data$mu_prior_loc <- 0.0
return(data)
}
data1 <- SetHyperparameters(data1)
hs_sens_model_name <- GenerateSensitivityFromModel("wei_hs_hyperparameters.stan")
stan_sensitivity_model <- GetStanSensitivityModel(hs_sens_model_name, data1)
